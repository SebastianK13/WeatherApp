// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApp.Context;

namespace WeatherApp.Migrations.WeatherReadingsDb
{
    [DbContext(typeof(WeatherReadingsDbContext))]
    [Migration("20210815115505_WeatherReadingsDbReorganized")]
    partial class WeatherReadingsDbReorganized
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherApp.Models.Main", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Feels_like")
                        .HasColumnType("float");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("Pressure")
                        .HasColumnType("int");

                    b.Property<double>("Temp")
                        .HasColumnType("float");

                    b.Property<double>("Temp_max")
                        .HasColumnType("float");

                    b.Property<double>("Temp_min")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Mains");
                });

            modelBuilder.Entity("WeatherApp.Models.Voivodeship", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoivodeshipName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Voivodeships");
                });

            modelBuilder.Entity("WeatherApp.Models.Weather", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Main")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherReadingsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WeatherReadingsId");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("WeatherApp.Models.WeatherApiKey", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WeatherApiKeys");
                });

            modelBuilder.Entity("WeatherApp.Models.WeatherReadings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MainId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VoivodeshipId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WindId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MainId");

                    b.HasIndex("VoivodeshipId");

                    b.HasIndex("WindId");

                    b.ToTable("WeatherReadings");
                });

            modelBuilder.Entity("WeatherApp.Models.Wind", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Deg")
                        .HasColumnType("int");

                    b.Property<double>("Speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Winds");
                });

            modelBuilder.Entity("WeatherApp.Models.Weather", b =>
                {
                    b.HasOne("WeatherApp.Models.WeatherReadings", null)
                        .WithMany("Weathers")
                        .HasForeignKey("WeatherReadingsId");
                });

            modelBuilder.Entity("WeatherApp.Models.WeatherReadings", b =>
                {
                    b.HasOne("WeatherApp.Models.Main", "Main")
                        .WithMany()
                        .HasForeignKey("MainId");

                    b.HasOne("WeatherApp.Models.Voivodeship", "Voivodeship")
                        .WithMany()
                        .HasForeignKey("VoivodeshipId");

                    b.HasOne("WeatherApp.Models.Wind", "Wind")
                        .WithMany()
                        .HasForeignKey("WindId");

                    b.Navigation("Main");

                    b.Navigation("Voivodeship");

                    b.Navigation("Wind");
                });

            modelBuilder.Entity("WeatherApp.Models.WeatherReadings", b =>
                {
                    b.Navigation("Weathers");
                });
#pragma warning restore 612, 618
        }
    }
}
